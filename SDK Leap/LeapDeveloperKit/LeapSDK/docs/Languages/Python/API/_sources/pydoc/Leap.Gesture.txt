Leap.Gesture
============

.. currentmodule:: Leap

.. class:: Gesture

  The Gesture class represents a recognized movement by the user.
 
  The Leap Motion Controller watches the activity within its field of view for certain movement
  patterns typical of a user gesture or command. For example, a movement from side to
  side with the hand can indicate a swipe gesture, while a finger poking forward
  can indicate a screen tap gesture.
 
  When the Leap Motion software recognizes a gesture, it assigns an ID and adds a
  Gesture object to the frame gesture list. For continuous gestures, which
  occur over many frames, the Leap Motion software updates the gesture by adding
  a Gesture object having the same ID and updated properties in each
  subsequent frame.
 
  *Important:* Recognition for each type of gesture must be enabled using the
  :func:`Controller.enable_gesture()` function; otherwise *no gestures are recognized or
  reported*.
 
  Subclasses of Gesture define the properties for the specific movement patterns
  recognized by the Leap Motion software.
 
  The Gesture subclasses for include:
 
  * :class:`CircleGesture` -- A circular movement by a finger.
  * :class:`SwipeGesture` -- A straight line movement by the hand with fingers extended.
  * :class:`ScreenTapGesture` -- A forward tapping movement by a finger.
  * :class:`KeyTapGesture` -- A downward tapping movement by a finger.
 
  Circle and swipe gestures are continuous and these objects can have a
  state of start, update, and stop.
 
  The screen tap gesture is a discrete gesture. The Leap Motion software only creates a single
  ScreenTapGesture object for each tap and it always has a stop state.
 
  Get valid Gesture instances from a Frame object. You can get a list of gestures
  with the :func:`Leap.Frame.gestures()` method. You can get a list of gestures since a
  specified frame by passing an earlier frame to this method. You can also
  use the :func:`Leap.Frame.gesture()` method to find a gesture in the current frame using
  an ID value obtained in a previous frame.
 
  Gesture objects can be invalid. For example, when you get a gesture by ID
  using ``Frame.gesture()``, and there is no gesture with that ID in the current
  frame, then ``gesture()`` returns an Invalid Gesture object (rather than a null
  value). Always check object validity in situations where a gesture might be
  invalid.
 
  The following keys can be used with the Config class to configure the gesture
  recognizer:
 
  ====================================  ========== ============= =======
  Key string                            Value type Default value Units
  ====================================  ========== ============= =======
  Gesture.Circle.MinRadius              float      5.0           mm
  Gesture.Circle.MinArc                 float      1.5 * pi      radians
  Gesture.Swipe.MinLength               float      150           mm
  Gesture.Swipe.MinVelocity             float      1000          mm/s
  Gesture.KeyTap.MinDownVelocity        float      50            mm/s
  Gesture.KeyTap.HistorySeconds         float      0.1           s
  Gesture.KeyTap.MinDistance            float      3.0           mm
  Gesture.ScreenTap.MinForwardVelocity  float      50            mm/s
  Gesture.ScreenTap.HistorySeconds      float      0.1           s
  Gesture.ScreenTap.MinDistance         float      5.0           mm
  ====================================  ========== ============= =======

  .. versionadded:: 1.0
 

  .. container:: data
     
	  .. data::  Gesture.TYPE_INVALID    = -1,

	      An invalid type.
      
	      .. versionadded:: 1.0
     
    
	  .. data::    Gesture.TYPE_SWIPE      = 1,

	      A straight line movement by the hand with fingers extended.
      
	      .. versionadded:: 1.0
         

	  .. data::    Gesture.TYPE_CIRCLE     = 4,

	      A circular movement by a finger.
      
	      .. versionadded:: 1.0
     
    
	  .. data::    Gesture.TYPE_SCREEN_TAP = 5,

	      A forward tapping movement by a finger.
      
	      .. versionadded:: 1.0
     
    
	  .. data::    Gesture.TYPE_KEY_TAP    = 6

	      A downward tapping movement by a finger.
      
	      .. versionadded:: 1.0
     
      
	  .. data::    Gesture.STATE_INVALID = -1,

	      An invalid state
      
	      .. versionadded:: 1.0
     
    
	  .. data::    Gesture.STATE_START   = 1,

	      The gesture is starting. Just enough has happened to recognize it.
      
	      .. versionadded:: 1.0
     
    
	  .. data::    Gesture.STATE_UPDATE  = 2,

	      The gesture is in progress. (Note: not all gestures have updates).
      
	      .. versionadded:: 1.0
     
    
	  .. data::    Gesture.STATE_STOP    = 3,

	      The gesture has completed or stopped.
      
	      .. versionadded:: 1.0
     
  
	  .. data:: Gesture.invalid
  
	    Returns an invalid Gesture object.
   
	    You can use the instance returned by this function in comparisons testing
	    whether a given Gesture instance is valid or invalid. (You can also use the
	    :attr:`Gesture.is_valid` attribute.)
   
	    .. versionadded:: 1.0

  
  .. container:: constructors
  
	  .. classmethod:: Gesture([gesture])

	    Constructs a new copy of an Gesture object.

	    **Arguments**
    
	    ``gesture`` (:class:`Leap.Gesture`) -- a Gesture object or one of its subclasses. If no
	    gesture parameter is supplied, an invalid Gesture object is returned.
    
	    Get valid instances of the Gesture class, which will be one of the Gesture subclasses, from a
	    Frame object.
    
	    .. versionadded:: 1.0
   

  .. container:: attributes
  
    .. attribute:: type -> int
  
      The gesture type.
   
      .. versionadded:: 1.0
   

    .. attribute:: state -> int
  
      The gesture state.
   
      Recognized movements occur over time and have a beginning, a middle,
      and an end. The ``state`` attribute reports where in that sequence this
      Gesture object falls.
   
      .. versionadded:: 1.0
   

    .. attribute:: id -> int
  
      The gesture ID.
   
      All Gesture objects belonging to the same recognized movement share the
      same ID value. Use the ID value with the :func:`Leap.Frame.gesture()` method to
      find updates related to this Gesture object in subsequent frames.
   
      .. versionadded:: 1.0
   

    .. attribute:: duration -> long
  
      The elapsed duration of the recognized movement up to the
      frame containing this Gesture object, in microseconds.
   
      The duration reported for the first Gesture in the sequence (with the
      STATE_START state) will typically be a small positive number since
      the movement must progress far enough for the Leap Motion software to recognize it as
      an intentional gesture.
   
      See also: :attr:`duration_seconds`
   
      .. versionadded:: 1.0
   

    .. attribute:: duration_seconds -> float
  
      The elapsed duration in seconds.
    
      See also: :attr:`duration`

      .. versionadded:: 1.0
   

    .. attribute:: frame -> Leap.Frame
  
      The Frame containing this Gesture instance.
   
      .. versionadded:: 1.0
   

    .. attribute:: hands -> Leap.HandList
  
      The list of hands associated with this Gesture, if any.
   
      If no hands are related to this gesture, the list is empty.
   
      .. versionadded:: 1.0
   

    .. attribute:: pointables -> Leap.PointableList
  
      The list of fingers and tools associated with this Gesture, if any.
   
      If no Pointable objects are related to this gesture, the list is empty.
   
      .. versionadded:: 1.0
   

    .. attribute:: is_valid -> bool
  
      Reports whether this Gesture instance represents a valid Gesture.
   
      An invalid Gesture object does not represent a snapshot of a recognized
      movement. Invalid Gesture objects are returned when a valid object cannot
      be provided. For example, when you get an gesture by ID
      using :func:`Frame.gesture()`, and there is no gesture with that ID in the current
      frame, then ``gesture()`` returns an invalid Gesture object (rather than a null
      value). Always check object validity in situations where an gesture might be
      invalid.
   
      .. versionadded:: 1.0
   

  .. container:: operators
  
    .. method:: eq(a, b) -> bool
    
      Compare Gesture object equality.
   
      Two Gestures are equal if they represent the same snapshot of the same
      recognized movement.
    
      .. versionadded:: 1.0
   

    .. method:: ne(a, b) -> bool
  
      Compare Gesture object inequality.
   
      Two Gestures are equal only if they represent the same snapshot of the same
      recognized movement.
    
      .. versionadded:: 1.0
   

