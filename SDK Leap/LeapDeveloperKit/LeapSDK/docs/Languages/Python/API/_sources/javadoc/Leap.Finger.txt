Leap.Finger
===========

.. currentmodule:: Leap

.. class:: Finger

  Extends :class:`Leap.Pointable`.
  
  The Finger class represents a tracked finger.
 
  Fingers are Pointable objects that the Leap Motion software has classified as a finger.
  Get valid Finger objects from a Frame or a Hand object.
 
  Fingers may be permanently associated to a hand. In this case the angular order of the finger IDs
  will be invariant. As fingers move in and out of view it is possible for the guessed ID
  of a finger to be incorrect. Consequently, it may be necessary for finger IDs to be
  exchanged. All tracked properties, such as velocity, will remain continuous in the API.
  However, quantities that are derived from the API output (such as a history of positions)
  will be discontinuous unless they have a corresponding ID exchange.
 
  Note that Finger objects can be invalid, which means that they do not contain
  valid tracking data and do not correspond to a physical finger. Invalid Finger
  objects can be the result of asking for a Finger object using an ID from an
  earlier frame when no Finger objects with that ID exist in the current frame.
  A Finger object created from the Finger constructor is also invalid.
  Test for validity with the :func:`Pointable.is_valid` attribute.
  
  .. versionadded:: 1.0
 
  .. container:: constructors
    
    .. classmethod:: Finger([finger]);

      Constructs a Finger object.
   
      Get valid Finger and Pointable objects from a Frame or a Hand object.
    
      **Arguments**
    
      ``finger`` (:class:`Leap.Pointable`) -- an object representing a finger. 
      If no finger parameter is supplied, or the object does not represent a finger,
      an ``invalid`` Finger object is returned.
    
      .. versionadded:: 1.0
      

  .. container:: data
  
    .. data:: Finger.invalid -> Leap.Finger
  
      An invalid Finger object.
   
      You can use this invalid object in comparisons testing
      whether a given Finger instance is valid or invalid. (You can also use the
      :attr:`Pointable.is_valid` attribute.)
   
      .. versionadded:: 1.0
   
