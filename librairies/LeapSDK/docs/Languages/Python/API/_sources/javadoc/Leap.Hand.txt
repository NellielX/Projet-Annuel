Leap.Hand
=========

.. currentmodule:: Leap

.. class:: Hand

  The Hand class reports the physical characteristics of a detected hand.
 
  Hand tracking data includes a palm position and velocity; vectors for
  the palm normal and direction to the fingers; properties of a sphere fit
  to the hand; and lists of the attached fingers and tools.
 
  Note that Hand objects can be invalid, which means that they do not contain
  valid tracking data and do not correspond to a physical entity. Invalid Hand
  objects can be the result of asking for a Hand object using an ID from an
  earlier frame when no Hand objects with that ID exist in the current frame.
  A Hand object created from the Hand constructor is also invalid.
  Test for validity with the :attr:`Hand.is_valid` property.
  
  .. versionadded:: 1.0
 

  .. container:: constructors
    
    .. classmethod:: Hand()

      Constructs a Hand object.
   
      An uninitialized hand is considered invalid.
      Get valid Hand objects from a Frame object.
    
      .. versionadded:: 1.0
   

  .. container:: attributes
  
    .. attribute:: id -> int
  
      A unique ID assigned to this Hand object, whose value remains the same
      across consecutive frames while the tracked hand remains visible. If
      tracking is lost (for example, when a hand is occluded by another hand
      or when it is withdrawn from or reaches the edge of the Leap Motion Controller field of view),
      the Leap Motion software may assign a new ID when it detects the hand in a future frame.
   
      Use the ID value with the :func:`Leap.Frame.hand()` function to find this Hand object
      in future frames.
   
      .. versionadded:: 1.0
   

    .. attribute:: frame -> Leap.Frame
  
      The associated Frame object, if available; otherwise,
      an invalid Frame object.
    
      .. versionadded:: 1.0
   

    .. attribute:: pointables -> PointableList
  
      The list of Pointable objects (fingers and tools) detected in this frame
      that are associated with this hand, given in arbitrary order. The list
      can be empty if no fingers or tools associated with this hand are detected.
   
      Use the :attr:`Pointable.is_finger` property to determine whether or not an
      item in the list represents a finger. Use the :attr:`Pointable.is_tool` function
      to determine whether or not an item in the list represents a tool.
      You can also get only fingers using the :attr:`Hand.fingers` property or
      only tools using the :attr:`Hand.tools` property.
   
      .. versionadded:: 1.0
   

    .. attribute:: fingers -> FingerList
  
      The list of Finger objects detected in this frame that are attached to
      this hand, given in arbitrary order.
      The list can be empty if no fingers attached to this hand are detected.
   
      .. versionadded:: 1.0
   

    .. attribute:: tools -> Leap.ToolList
  
      The list of Tool objects detected in this frame that are held by this
      hand, given in arbitrary order.
      The list can be empty if no tools held by this hand are detected.
   
      .. versionadded:: 1.0
   

    .. attribute:: palm_position -> Leap.Vector
  
      The center position of the palm in millimeters from the Leap Motion Controller origin.
   
      .. versionadded:: 1.0
   

    .. attribute:: stabilized_palm_position -> Leap.Vector
  
      The stabilized palm position of this Hand.
   
      Smoothing and stabilization is performed in order to make
      this value more suitable for interaction with 2D content. The stabilized
      position lags behind the palm position by a variable amount, depending
      primarily on the speed of movement.

      .. versionadded:: 1.0
   

    .. attribute:: palm_velocity -> Leap.Vector
  
      The rate of change of the palm position in millimeters/second.
   
      .. versionadded:: 1.0
   

    .. attribute:: palm_normal -> Leap.Vector
  
      The normal vector to the palm. If your hand is flat, this vector will
      point downward, or "out" of the front surface of your palm.
   
      .. image:: ../../../images/Leap_Palm_Vectors.png
   
      The direction is expressed as a unit vector pointing in the same
      direction as the palm normal (that is, a vector orthogonal to the palm).
   
      .. versionadded:: 1.0
   

    .. attribute:: direction -> Leap.Vector
  
      The direction from the palm position toward the fingers.
   
      The direction is expressed as a unit vector pointing in the same
      direction as the directed line from the palm position to the fingers.
   
      .. versionadded:: 1.0
   

    .. attribute:: sphere_center -> Leap.Vector
  
      The center of a sphere fit to the curvature of this hand.
   
      This sphere is placed roughly as if the hand were holding a ball.
   
      .. image:: ../../../images/Leap_Hand_Ball.png
   
      .. versionadded:: 1.0
   

    .. attribute:: sphere_radius -> float
  
      The radius of a sphere fit to the curvature of this hand.
   
      This sphere is placed roughly as if the hand were holding a ball. Thus the
      size of the sphere decreases as the fingers are curled into a fist.
    
      .. versionadded:: 1.0
   

    .. attribute:: time_visible -> float
  
      The duration of time this Hand has been visible to the Leap Motion Controller.
   
      .. versionadded:: 1.0
   

    .. attribute:: is_valid -> bool
  
      Reports whether this is a valid Hand object.
   
      .. versionadded:: 1.0
   


  .. container:: methods
  
    .. method:: pointable(id) -> Leap.Pointable
  
      The Pointable object with the specified ID associated with this hand.
   
      Use this function to retrieve a Pointable object
      associated with this hand using an ID value obtained from a previous frame.
      This function always returns a Pointable object, but if no finger or tool
      with the specified ID is present, an invalid Pointable object is returned.
   
      Note that ID values persist across frames, but only until tracking of a
      particular object is lost. If tracking of a finger or tool is lost and subsequently
      regained, the new Pointable object representing that finger or tool may have a
      different ID than that representing the finger or tool in an earlier frame.
   
      **Arguments**
    
      ``id`` (int) -- The ID value of a Pointable object from a previous frame.
    
      **Returns**
    
      ``Leap.Pointable`` -- The Pointable object with the matching ID if one exists for this
      hand in this frame; otherwise, an invalid Pointable object is returned.
    
      .. versionadded:: 1.0
   

    .. method:: finger(id) -> Leap.Finger
  
      The Finger object with the specified ID attached to this hand.
   
      Use this function to retrieve a Finger object attached to
      this hand using an ID value obtained from a previous frame.
      This function always returns a Finger object, but if no finger
      with the specified ID is present, an invalid Finger object is returned.
   
      Note that ID values persist across frames, but only until tracking of a
      particular object is lost. If tracking of a finger is lost and subsequently
      regained, the new Finger object representing that finger may have a
      different ID than that representing the finger in an earlier frame.
   
      **Arguments**

      ``id`` (int) -- The ID value of a Finger object from a previous frame.
    
      **Returns**
    
      ``Leap.Finger`` -- The Finger object with the matching ID if one exists for this
      hand in this frame; otherwise, an invalid Finger object is returned.
    
      .. versionadded:: 1.0
   

    .. method:: tool(id) -> Leap.Tool
  
      The Tool object with the specified ID held by this hand.
   
      Use this function to retrieve a Tool object held by
      this hand using an ID value obtained from a previous frame.
      This function always returns a Tool object, but if no tool
      with the specified ID is present, an invalid Tool object is returned.
   
      Note that ID values persist across frames, but only until tracking of a
      particular object is lost. If tracking of a tool is lost and subsequently
      regained, the new Tool object representing that tool may have a
      different ID than that representing the tool in an earlier frame.
   
      **Arguments**

      ``id`` (int) -- The ID value of a Tool object from a previous frame.
    
      **Returns**
    
      ``Leap.Tool`` -- The Tool object with the matching ID if one exists for this
      hand in this frame; otherwise, an invalid Tool object is returned.
    
      .. versionadded:: 1.0
   

    .. method:: translation(sinceFrame) -> Leap.Vector
  
      The change of position of this hand between the current frame and
      the specified frame.
   
      The returned translation vector provides the magnitude and direction of
      the movement in millimeters.
   
      If a corresponding Hand object is not found in sinceFrame, or if either
      this frame or sinceFrame are invalid Frame objects, then this method
      returns a zero vector.
   
      **Arguments**
    
      ``sinceFrame`` (:class:`Leap.Frame`) -- The starting frame for computing the translation.
    
      **Returns**
    
      ``Leap.Vector`` -- A Vector representing the heuristically determined change in
      hand position between the current frame and that specified in the
      sinceFrame parameter.
    
      .. versionadded:: 1.0
   

    .. method:: translation_probability(sinceFrame) -> float
  
      The estimated probability that the hand motion between the current
      frame and the specified frame is intended to be a translating motion.
   
      If a corresponding Hand object is not found in sinceFrame, or if either
      this frame or sinceFrame are invalid Frame objects, then this method
      returns zero.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) -- The starting frame for computing the translation.
    
      **Returns**
    
      ``float`` -- A value between 0 and 1 representing the estimated probability
      that the hand motion between the current frame and the specified frame
      is intended to be a translating motion.
    
      .. versionadded:: 1.0
   

    .. method:: rotation_axis(sinceFrame) -> Leap.Vector
  
      The axis of rotation derived from the change in orientation of this
      hand, and any associated fingers and tools, between the current frame
      and the specified frame.
   
      The returned direction vector is normalized.
   
      If a corresponding Hand object is not found in sinceFrame, or if either
      this frame or sinceFrame are invalid Frame objects, then this method
      returns a zero vector.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) -- The starting frame for computing the relative rotation.

      **Returns**
      ``Leap.Vector`` -- A normalized direction Vector representing the heuristically
      determined axis of rotational change of the hand between the current
      frame and that specified in the sinceFrame parameter.
    
      .. versionadded:: 1.0
   
    .. method:: rotation_angle(sinceFrame[, axis]) -> float
  
      The angle of rotation derived from the change in orientation of this hand, and any 
      associated fingers and tools, between the current frame and the specified frame..
   
      If no ``axis`` parameter is specified, then the returned angle is expressed in radians 
      measured clockwise around the computed :func:`rotation_axis()` vector (using the right-hand rule) 
      between the start and end frames. The value is always between 0 and pi radians (0 and 180 degrees).
   
      If an ``axis`` parameter is specified, then the returned angle is expressed in radians measured 
      clockwise around the supplied rotation axis (using the right-hand rule). In this case, the value 
      is always between -pi and pi radians (-180 and 180 degrees).
      
      If a corresponding Hand object is not found in sinceFrame, or if either
      this frame or sinceFrame are invalid Frame objects, then the angle of
      rotation is zero.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) --  The starting frame for computing the relative rotation.
    
      ``axis`` (:class:`Leap.Vector`) -- The axis to measure rotation around.
    
      **Returns**

      ``float`` -- A positive value containing the heuristically determined
      rotational change between the current frame and that specified in the
      sinceFrame parameter, in radians.
    
      .. versionadded:: 1.0


    .. method:: rotation_matrix(sinceFrame) -> Leap.Matrix
  
      The transform matrix expressing the rotation derived from the change
      in orientation of this hand, and any associated fingers and tools,
      between the current frame and the specified frame.
   
      If a corresponding Hand object is not found in sinceFrame, or if either
      this frame or sinceFrame are invalid Frame objects, then this method
      returns an identity matrix.
   
      **Arguments**
    
      ``sinceFrame`` (:class:`Leap.Frame`) -- The starting frame for computing the relative rotation.
    
      **Returns**
    
      ``Leap.Matrix`` -- A transformation Matrix representing the heuristically determined
      rotational change of the hand between the current frame and that specified
      in the sinceFrame parameter.
    
      .. versionadded:: 1.0
   

    .. method:: rotation_probability(sinceFrame) -> float
  
      The estimated probability that the hand motion between the current
      frame and the specified frame is intended to be a rotating motion.
   
      If a corresponding Hand object is not found in ``sinceFrame``, or if either
      this frame or ``sinceFrame`` are invalid Frame objects, then this method
      returns zero.
   
      **Arguments**
    
      ``sinceFrame`` -- The starting frame for computing the relative rotation.
    
      **Returns**
    
      ``float`` -- A value between 0 and 1 representing the estimated probability
      that the hand motion between the current frame and the specified frame
      is intended to be a rotating motion.
    
      .. versionadded:: 1.0
   

    .. method:: scale_factor(sinceFrame) -> float
  
      The scale factor derived from this hand's motion between the current frame
      and the specified frame.
   
      The scale factor is always positive. A value of 1.0 indicates no
      scaling took place. Values between 0.0 and 1.0 indicate contraction
      and values greater than 1.0 indicate expansion.
   
      The Leap Motion software derives scaling from the relative inward or outward motion of
      a hand and its associated fingers and tools (independent of translation
      and rotation).
   
      If a corresponding Hand object is not found in sinceFrame, or if either
      this frame or sinceFrame are invalid Frame objects, then this method
      returns 1.0.
   
      **Arguments**
    
      ``sinceFrame`` (float) -- The starting frame for computing the relative scaling.
    
      **Returns**
    
      ``float`` -- A positive value representing the heuristically determined
      scaling change ratio of the hand between the current frame and that
      specified in the ``sinceFrame`` parameter.
    
      .. versionadded:: 1.0
   

    .. method:: scale_probability(sinceFrame) -> float
  
      The estimated probability that the hand motion between the current
      frame and the specified frame is intended to be a scaling motion.
   
      If a corresponding Hand object is not found in sinceFrame, or if either
      this frame or sinceFrame are invalid Frame objects, then this method
      returns zero.
   
      **Arguments**
    
      ``sinceFrame`` (:class:`Leap.Frame`) -- The starting frame for computing the relative scaling.
    
      **Returns**
    
      ``float`` -- A value between 0 and 1 representing the estimated probability
      that the hand motion between the current frame and the specified frame
      is intended to be a scaling motion.
    
      .. versionadded:: 1.0
   
  .. container:: data
  
    .. data:: invalid -> Leap.Hand
  
      An invalid Hand object.
   
      You can use the instance returned by this function in comparisons testing
      whether a given Hand instance is valid or invalid. (You can also use the
      :attr:`Hand.is_valid`property.)
   
      .. versionadded:: 1.0
   
  
  
  .. container:: operators
  
    .. method:: eq(a, b) -> bool
  
      Compare Hand object equality.
      Two Hand objects are equal if and only if both Hand objects represent the
      exact same physical hand in the same frame and both Hand objects are valid.
    
      .. versionadded:: 1.0
   

    .. method:: ne(a, b) -> bool
  
      Compare Hand object inequality.
      Two Hand objects are equal if and only if both Hand objects represent the
      exact same physical hand in the same frame and both Hand objects are valid.
    
      .. versionadded:: 1.0
   

