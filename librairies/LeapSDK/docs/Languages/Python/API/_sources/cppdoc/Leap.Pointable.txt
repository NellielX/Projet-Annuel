Leap.Pointable
==============

.. currentmodule:: Leap

.. class:: Pointable

  The Pointable class reports the physical characteristics of a detected finger or tool.
 
  Both fingers and tools are classified as Pointable objects. Use :attr:`Pointable.is_finger`
  to determine whether a Pointable object represents a finger. Use 
  :attr:`Pointable.is_tool` to determine whether a Pointable object represents a tool.
  The Leap Motion software classifies a detected entity as a tool when it is thinner, straighter, and longer
  than a typical finger.
 
  To provide touch emulation, the Leap Motion software associates a floating touch
  plane that adapts to the user's finger movement and hand posture. The Leap Motion
  interprets purposeful movements toward this plane as potential touch points.
  The Pointable class reports
  touch state with the touch_zone and touch_distance values.
 
  Note that Pointable objects can be invalid, which means that they do not contain
  valid tracking data and do not correspond to a physical entity. Invalid Pointable
  objects can be the result of asking for a Pointable object using an ID from an
  earlier frame when no Pointable objects with that ID exist in the current frame.
  A Pointable object created from the Pointable constructor is also invalid.
  Test for validity with the :attr:`Pointable.is_valid` property.
 
    .. versionadded:: 1.0


  .. container:: constructors
  
    .. classmethod:: Pointable()

      Constructs a Pointable object.
   
      An uninitialized pointable is considered invalid.
      Get valid Pointable objects from a Frame or a Hand object.
    
      .. versionadded:: 1.0
   

  .. container:: attributes
  
    .. attribute:: id -> int
  
      A unique ID assigned to this Pointable object, whose value remains the
      same across consecutive frames while the tracked finger or tool remains
      visible. If tracking is lost (for example, when a finger is occluded by
      another finger or when it is withdrawn from the Leap Motion Controller field of view), the
      Leap Motion software may assign a new ID when it detects the entity in a future frame.
   
      Use the ID value with the :func:`Frame.pointable()` function to find this
      Pointable object in future frames.
   
      IDs should be from 1 to 100 (inclusive). If more than 100 objects are tracked
      an IDs of -1 will be used until an ID in the defined range is available.
   
      .. versionadded:: 1.0
   

    .. attribute:: frame -> Leap.Frame
  
      The Frame associated with this Pointable object.
    
      .. versionadded:: 1.0
   

    .. attribute:: hand -> Leap.Hand
  
      The Hand associated with this finger or tool.
    
      .. versionadded:: 1.0
   

    .. attribute:: tip_position -> Leap.Vector
  
      The tip position in millimeters from the Leap Motion origin.
    
      .. versionadded:: 1.0
   

    .. attribute:: tip_velocity -> Leap.Vector
  
      The rate of change of the tip position in millimeters/second.
    
      .. versionadded:: 1.0
   

    .. attribute:: direction -> Leap.Vector
  
      The direction in which this finger or tool is pointing.
   
      The direction is expressed as a unit vector pointing in the same
      direction as the tip.
   
      .. image:: ../../../images/Leap_Finger_Model.png
   
      .. versionadded:: 1.0
   

    .. attribute:: width -> float
  
      The estimated width of the finger or tool in millimeters.
   
      The reported width is the average width of the visible portion of the
      finger or tool from the hand to the tip. If the width isn't known,
      then a value of 0 is returned.
    
      .. versionadded:: 1.0
   

    .. attribute:: length -> float
  
      The estimated length of the finger or tool in millimeters.
   
      The reported length is the visible length of the finger or tool from the
      hand to tip. If the length isn't known, then a value of 0 is returned.
   
      .. versionadded:: 1.0
   

    .. attribute:: is_finger -> bool
  
      Whether or not the Pointable is believed to be a finger.
      Fingers are generally shorter, thicker, and less straight than tools.
   
      .. versionadded:: 1.0
   

    .. attribute:: is_tool -> bool
  
      Whether or not the Pointable is believed to be a tool.
      Tools are generally longer, thinner, and straighter than fingers.
    
      .. versionadded:: 1.0
   

    .. attribute:: is_valid -> bool
  
      Reports whether this is a valid Pointable object.
   
      .. versionadded:: 1.0
   

    .. attribute:: touch_zone -> int
  
      The current touch zone of this Pointable object.
   
      The Leap Motion software computes the touch zone based on a floating touch
      plane that adapts to the user's finger movement and hand posture. The Leap
      Motion software interprets purposeful movements toward this plane as potential touch
      points. When a Pointable moves close to the adaptive touch plane, it enters the
      "hovering" zone. When a Pointable reaches or passes through the plane, it enters
      the "touching" zone.
   
      The defined zones are:
   
     * NONE -- The Pointable is outside the hovering zone.
     * HOVERING -- The Pointable is close to, but not touching the touch plane.
     * TOUCHING -- The Pointable has penetrated the touch plane.
   
      The touch_distance value provides a normalized indication of the distance to
      the touch plane when the Pointable is in the hovering or touching zones.
    
      .. versionadded:: 1.0
   

    .. attribute:: touch_distance -> float
  
      A value proportional to the distance between this Pointable object and the
      adaptive touch plane.
   
      .. image:: ../../../images/Leap_Touch_Plane.png
   
      The touch distance is a value in the range [-1, 1]. The value 1.0 indicates the
      Pointable is at the far edge of the hovering zone. The value 0 indicates the
      Pointable is just entering the touching zone. A value of -1.0 indicates the
      Pointable is firmly within the touching zone. Values in between are
      proportional to the distance from the plane. Thus, the touch_distance of 0.5
      indicates that the Pointable is halfway into the hovering zone.
   
      You can use the touch_distance value to modulate visual feedback given to the
      user as their fingers close in on a touch target, such as a button.
    
      .. versionadded:: 1.0
   

    .. attribute:: stabilized_tip_position -> Leap.Vector
  
      The stabilized tip position of this Pointable.
   
      Smoothing and stabilization is performed in order to make
      this value more suitable for interaction with 2D content. The stabilized
      position lags behind the tip position by a variable amount, depending
      primarily on the speed of movement.
   
      .. versionadded:: 1.0
   

    .. attribute:: time_visible -> float
  
      The duration of time this Pointable has been visible to the Leap Motion Controller.
   
      .. versionadded:: 1.0
   

  .. container:: data
  
    .. data:: Pointable.invalid -> Leap.Pointable
  
      Returns an invalid Pointable object.
   
      You can use the instance returned by this function in comparisons testing
      whether a given Pointable instance is valid or invalid. (You can also use the
      :attr:`Pointable.is_valid` property.)
   
      .. versionadded:: 1.0
   

    .. data::  Pointable.ZONE_NONE       = 0
 
      The Pointable object is too far from the plane to be
      considered hovering or touching.
    
      .. versionadded:: 1.0
   
  
    .. data::  Pointable.ZONE_HOVERING   = 1

      The Pointable object is close to, but not touching,
      the plane.
    
      .. versionadded:: 1.0
   
  
    .. data::  Pointable.ZONE_TOUCHING   = 2

      The Pointable has penetrated the plane.
    
      .. versionadded:: 1.0
     

  .. container:: operators
  
    .. method:: eq(a, b) -> bool
  
      Compare Pointable object equality.
      Two Pointable objects are equal if and only if both Pointable objects represent the
      exact same physical entities in the same frame and both Pointable objects are valid.
    
      .. versionadded:: 1.0
   

    .. method:: ne(a, b) -> bool
  
      Compare Pointable object inequality.
      Two Pointable objects are equal if and only if both Pointable objects represent the
      exact same physical entities in the same frame and both Pointable objects are valid.
    
      .. versionadded:: 1.0
   
   
