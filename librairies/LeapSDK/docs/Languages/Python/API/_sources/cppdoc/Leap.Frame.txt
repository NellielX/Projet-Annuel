Leap.Frame
==========

.. currentmodule:: Leap

.. class:: Frame

  The Frame class represents a set of hand and finger tracking data detected
  in a single frame.
 
  The Leap Motion software detects hands, fingers and tools within the tracking area, reporting
  their positions, orientations and motions in frames at the Leap Motion frame rate.
 
  Access Frame objects through an instance of the :class:`Controller` class. Implement a
  Listener subclass to receive a callback event when a new Frame is available.
  
  .. versionadded:: 1.0
 
  
  .. container:: constructors
  
    .. classmethod:: Frame()

      Constructs a Frame object.
   
      Frame instances created with this constructor are invalid.
      Get valid Frame objects by calling the :func:`Controller.frame()` function.
    
      .. versionadded:: 1.0
   

  .. container:: attributes
  
    .. attribute:: id -> long
  
      A unique ID for this Frame. Consecutive frames processed by the Leap Motion
      software have consecutive increasing values.
   
      .. versionadded:: 1.0
   

    .. attribute:: timestamp -> long
  
      The frame capture time in microseconds elapsed since the Leap started.
   
      .. versionadded:: 1.0
   

    .. attribute:: hands -> Leap.HandList
  
      The list of Hand objects detected in this frame, given in arbitrary order.
      The list can be empty if no hands are detected.
   
      .. versionadded:: 1.0
   

    .. attribute:: pointables -> PointableList
  
      The list of Pointable objects (fingers and tools) detected in this frame,
      given in arbitrary order. The list can be empty if no fingers or tools are detected.
   
      .. versionadded:: 1.0
   

    .. attribute:: fingers -> FingerList
  
      The list of Finger objects detected in this frame, given in arbitrary order.
      The list can be empty if no fingers are detected.
   
      .. versionadded:: 1.0
   

    .. attribute:: tools -> ToolList
  
      The list of Tool objects detected in this frame, given in arbitrary order.
      The list can be empty if no tools are detected.
   
      .. versionadded:: 1.0
   

    .. attribute:: interaction_box -> Leap.InteractionBox
  
      The current InteractionBox for the frame. See the :class:`Leap.InteractionBox` class
      documentation for more details on how this class should be used.
   
      .. versionadded:: 1.0
   

    .. attribute:: current_frames_per_second -> float
  
      The instantaneous framerate.
   
      The rate at which the Leap Motion software is providing frames of data
      (in frames per second). The framerate can fluctuate depending on available computing
      resources, activity within the device field of view, software tracking settings,
      and other factors.
   
      .. versionadded:: 1.0
   

    .. attribute:: is_valid -> bool
  
      Reports whether this Frame instance is valid.
   
      A valid Frame is one generated by the :class:`Leap.Controller` object that contains
      tracking data for all detected entities. An invalid Frame contains no
      actual tracking data, but you can call its functions without risk of a
      null pointer exception. The invalid Frame mechanism makes it more
      convenient to track individual data across the frame history. For example,
      you can invoke:
   
      .. literalinclude:: ../../../codeexamples/includes/python/Frame_Valid_Chain.txt
   
      for an arbitrary Frame history value, "n", without first checking whether
      frame(n) returned a null object. (You should still check that the
      returned Finger instance is valid.)
   
      .. versionadded:: 1.0
   

  .. container:: methods
  
    .. method:: hand(id) -> Leap.Hand
  
      The Hand object with the specified ID in this frame.
   
      Use the :func:`Frame.hand()` function to retrieve the Hand object from
      this frame using an ID value obtained from a previous frame.
      This function always returns a Hand object, but if no hand
      with the specified ID is present, an invalid Hand object is returned.
   
      Note that ID values persist across frames, but only until tracking of a
      particular object is lost. If tracking of a hand is lost and subsequently
      regained, the new Hand object representing that physical hand may have
      a different ID than that representing the physical hand in an earlier frame.
   
      **Arguments**

      ``id`` (int) -- The ID value of a Hand object from a previous frame.
    
      **Returns**

      ``Leap.Hand`` -- The Hand object with the matching ID if one exists in this frame;
      otherwise, an invalid Hand object is returned.
    
      .. versionadded:: 1.0
   

    .. method:: pointable(id) -> Pointable
  
      The Pointable object with the specified ID in this frame.
   
      Use the this function to retrieve the Pointable object from
      this frame using an ID value obtained from a previous frame.
      This function always returns a Pointable object, but if no finger or tool
      with the specified ID is present, an invalid Pointable object is returned.
   
      Note that ID values persist across frames, but only until tracking of a
      particular object is lost. If tracking of a finger or tool is lost and subsequently
      regained, the new Pointable object representing that finger or tool may have
      a different ID than that representing the finger or tool in an earlier frame.
   
      **Arguments**

      ``id`` (int) -- The ID value of a Pointable object from a previous frame.
    
      **Returns**

      ``Leap.Pointable`` -- The Pointable object with the matching ID if one exists in this frame;
      otherwise, an invalid Pointable object is returned.
    
      .. versionadded:: 1.0
   

    .. method:: finger(id) -> Finger
  
      The Finger object with the specified ID in this frame.
   
      Use this function to retrieve the Finger object from
      this frame using an ID value obtained from a previous frame.
      This function always returns a Finger object, but if no finger
      with the specified ID is present, an invalid Finger object is returned.
   
      Note that ID values persist across frames, but only until tracking of a
      particular object is lost. If tracking of a finger is lost and subsequently
      regained, the new Finger object representing that physical finger may have
      a different ID than that representing the finger in an earlier frame.
   
      **Arguments**

      ``id`` (int) -- The ID value of a Finger object from a previous frame.
    
      **Returns**

      ``Leap.Finger`` -- The Finger object with the matching ID if one exists in this frame;
      otherwise, an invalid Finger object is returned.
    
      .. versionadded:: 1.0
   

    .. method:: tool(id) -> Tool
  
      The Tool object with the specified ID in this frame.
   
      Use this function to retrieve the Tool object from
      this frame using an ID value obtained from a previous frame.
      This function always returns a Tool object, but if no tool
      with the specified ID is present, an invalid Tool object is returned.
   
      Note that ID values persist across frames, but only until tracking of a
      particular object is lost. If tracking of a tool is lost and subsequently
      regained, the new Tool object representing that tool may have a
      different ID than that representing the tool in an earlier frame.
   
      **Arguments**

      ``id`` (int) -- The ID value of a Tool object from a previous frame.
    
      **Returns**

      ``Leap.Tool`` -- The Tool object with the matching ID if one exists in this frame;
      otherwise, an invalid Tool object is returned.
    
      .. versionadded:: 1.0
   

    .. method:: gesture(id) -> Leap.Gesture
  
      The Gesture object with the specified ID in this frame.
   
      Use the :func:`Frame.gesture()` function to return a Gesture object in this
      frame using an ID obtained in an earlier frame. The function always
      returns a Gesture object, but if there was no update for the gesture in
      this frame, then an invalid Gesture object is returned.
   
      All Gesture objects representing the same recognized movement share the
      same ID.
    
      **Arguments**

      id The ID of an Gesture object from a previous frame.

      **Returns**

      The Gesture object in the frame with the specified ID if one
      exists; Otherwise, an Invalid Gesture object.
    
      .. versionadded:: 1.0
   

    .. method:: gestures([sinceFrame]) -> Leap.GestureList
  
      Returns a GestureList containing all gestures that have occured since
      the specified frame.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) -- An earlier Frame object. The starting frame must
      still be in the frame history cache, which has a default length of 60 frames. If no
      ``sinceFrame`` parameter is supplied, only the gestures from ththis frame ar returned.
    
      **Returns** 
    
      ``Leap.GestureList`` -- The list of the Gesture objects that have occured
      since the specified frame.
    
      .. versionadded:: 1.0
   

    .. method:: translation(sinceFrame) -> Leap.Vector
  
      The change of position derived from the overall linear motion between
      the current frame and the specified frame.
   
      The returned translation vector provides the magnitude and direction of
      the movement in millimeters.
   
      The Leap Motion software derives frame translation from the linear motion of
      all objects detected in the field of view.
   
      If either this frame or sinceFrame is an invalid Frame object, then this
      method returns a zero vector.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) -- The starting frame for computing the relative 
      translation.
    
      **Returns**

      ``Leap.Vector`` -- A vector representing the heuristically determined change in
      position of all objects between the current frame and that specified
      in the sinceFrame parameter.
    
      .. versionadded:: 1.0
   

    .. method:: translation_probability(sinceFrame) -> float
  
      The estimated probability that the overall motion between the current
      frame and the specified frame is intended to be a translating motion.
   
      If either this frame or sinceFrame is an invalid Frame object, then this
      method returns zero.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) --  The starting frame for computing the translation.

      **Returns**

      ``float`` -- A value between 0 and 1 representing the estimated probability
      that the overall motion between the current frame and the specified frame
      is intended to be a translating motion.
    
      .. versionadded:: 1.0
   

    .. method:: rotation_axis(sinceFrame) -> Leap.Vector
  
      The axis of rotation derived from the overall rotational motion between
      the current frame and the specified frame.
   
      The returned direction vector is normalized.
   
      The Leap Motion software derives frame rotation from the relative change in position and
      orientation of all objects detected in the field of view.
   
      If either this frame or sinceFrame is an invalid Frame object, or if no
      rotation is detected between the two frames, a zero vector is returned.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) --  The starting frame for computing the relative rotation.
    
      **Returns**

      ``Leap.Vector`` -- A normalized direction vector representing the axis of the
      heuristically determined rotational change between the current frame
      and that specified in the ``sinceFrame`` parameter.
    
      .. versionadded:: 1.0
   

    .. method:: rotation_angle(sinceFrame[, axis]) -> float
  
      The angle of rotation derived from the overall
      rotational motion between the current frame and the specified frame.
   
      If no ``axis`` parameter is specified, then the returned angle is expressed in radians 
      measured clockwise around the computed :func:`rotation_axis()` vector (using the right-hand rule) 
      between the start and end frames. The value is always between 0 and pi radians (0 and 180 degrees).
   
      If an ``axis`` parameter is specified, then the returned angle is expressed in radians measured 
      clockwise around the supplied rotation axis (using the right-hand rule). In this case, the value 
      is always between -pi and pi radians (-180 and 180 degrees).
   
      The Leap Motion software derives frame rotation from the relative change in position and
      orientation of all objects detected in the field of view.
   
      If either this frame or sinceFrame is an invalid Frame object, then the
      angle of rotation is zero.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) --  The starting frame for computing the relative rotation.
    
      ``axis`` (:class:`Leap.Vector`) -- The axis to measure rotation around.
    
      **Returns**

      ``float`` -- A positive value containing the heuristically determined
      rotational change between the current frame and that specified in the
      sinceFrame parameter, in radians.
    
      .. versionadded:: 1.0
      

    .. method:: rotation_matrix(sinceFrame) -> Leap.Matrix
  
      The transform matrix expressing the rotation derived from the overall
      rotational motion between the current frame and the specified frame.
   
      The Leap Motion software derives frame rotation from the relative change in position and
      orientation of all objects detected in the field of view.
   
      If either this frame or sinceFrame is an invalid Frame object, then this
      method returns an identity matrix.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) --  The starting frame for computing the relative rotation.
    
      **Returns**

      ``Leap.Matrix`` -- A transformation Matrix containing the heuristically determined
      rotational change between the current frame and that specified in the
      sinceFrame parameter.
    
      .. versionadded:: 1.0
   

    .. method:: rotation_probability(sinceFrame) -> float
  
      The estimated probability that the overall motion between the current
      frame and the specified frame is intended to be a rotating motion.
   
      If either this frame or sinceFrame is an invalid Frame object, then this
      method returns zero.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) --  The starting frame for computing the relative rotation.
    
      **Returns**

      ``float`` -- A value between 0 and 1 representing the estimated probability
      that the overall motion between the current frame and the specified frame
      is intended to be a rotating motion.
    
      .. versionadded:: 1.0
   

    .. method:: scale_factor(sinceFrame) -> float
  
      The scale factor derived from the overall motion between the current frame
      and the specified frame.
   
      The scale factor is always positive. A value of 1.0 indicates no
      scaling took place. Values between 0.0 and 1.0 indicate contraction
      and values greater than 1.0 indicate expansion.
   
      The Leap Motion software derives scaling from the relative inward or outward motion of
      all objects detected in the field of view (independent of translation
      and rotation).
   
      If either this frame or sinceFrame is an invalid Frame object, then this
      method returns 1.0.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) --  The starting frame for computing the relative scaling.
    
      **Returns**

      ``float`` -- A positive value representing the heuristically determined
      scaling change ratio between the current frame and that specified in the
      sinceFrame parameter.
    
      .. versionadded:: 1.0
   

    .. method:: scale_probability(sinceFrame) -> float
  
      The estimated probability that the overall motion between the current
      frame and the specified frame is intended to be a scaling motion.
   
      If either this frame or sinceFrame is an invalid Frame object, then this
      method returns zero.
   
      **Arguments**

      ``sinceFrame`` (:class:`Leap.Frame`) --  The starting frame for computing the relative scaling.
    
      **Returns**

      ``float`` -- A value between 0 and 1 representing the estimated probability
      that the overall motion between the current frame and the specified frame
      is intended to be a scaling motion.
    
      .. versionadded:: 1.0
   

  .. container:: data

    .. data:: Frame.invalid
  
      An invalid Frame object.
   
      You can use the instance returned by this function in comparisons testing
      whether a given Frame instance is valid or invalid. (You can also use the
      :attr:`Frame.is_valid` attribute.)
   
      .. versionadded:: 1.0

   
  .. container:: operators

    .. method:: eq(a, b) -> bool
  
      Compare Frame object equality.
    
      Two Frame objects are equal if and only if both Frame objects represent
      the exact same frame of tracking data and both Frame objects are valid.
    
      .. versionadded:: 1.0
   

    .. method:: ne(a, b) -> bool
  
      Compare Frame object inequality.

      Two Frame objects are equal if and only if both Frame objects represent
      the exact same frame of tracking data and both Frame objects are valid.

      .. versionadded:: 1.0
   
